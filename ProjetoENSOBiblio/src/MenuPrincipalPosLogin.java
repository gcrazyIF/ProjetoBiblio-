import java.util.*;
import javax.swing.JOptionPane;
import java.time.LocalDate;
import javax.swing.JFrame;
public class MenuPrincipalPosLogin extends javax.swing.JFrame {

    ArrayList<Livro> livros;
    ArrayList<Exemplar> exemplares;
    ArrayList<Emprestimo> emprestimos;
    ArrayList<Usuario> usuarios;
    ArrayList<Avaliacao> avaliacoes;
    String livroPesquisaAutor, livroPesquisaTitulo, livroPesquisaGenero;
    String IDUsuarioEmpr, IDEmprestimo, IDEmprVerifica, IDLivroEmpr, IDUsuarioReserva, IDReserva, IDlivroReserva, senhaVerifica;
    LocalDate dataVencimento;
    /**
     * Creates new form MenuPrincipalPosLogin
     */
    public MenuPrincipalPosLogin(ArrayList<Livro> livros, ArrayList<Exemplar> exemplares, ArrayList<Emprestimo> emprestimos, ArrayList<Usuario> usuarios, ArrayList<Avaliacao> avaliacoes) {
        initComponents();
        this.livros = livros;
        this.exemplares = exemplares;
        this.emprestimos = emprestimos;
        this.usuarios = usuarios;
        this.avaliacoes = avaliacoes;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tituloInterface = new javax.swing.JLabel();
        avaliarLivroBotao = new javax.swing.JButton();
        realizarEmprestimoBotao = new javax.swing.JButton();
        reservarLivroBotao = new javax.swing.JButton();
        renovarEmprestimoBotao = new javax.swing.JButton();
        pesquisarTituloBotao = new javax.swing.JButton();
        pesquisarAutorBotao = new javax.swing.JButton();
        cancelarEmprestimoBotao = new javax.swing.JButton();
        cancelarReservaBotao = new javax.swing.JButton();
        pesquisarGeneroBotao = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tituloInterface.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 48)); // NOI18N
        tituloInterface.setText("Biblio+");
        getContentPane().add(tituloInterface, new org.netbeans.lib.awtextra.AbsoluteConstraints(1643, 6, -1, -1));

        avaliarLivroBotao.setContentAreaFilled(false);
        avaliarLivroBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avaliarLivroBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(avaliarLivroBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 280, 40));

        realizarEmprestimoBotao.setContentAreaFilled(false);
        realizarEmprestimoBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realizarEmprestimoBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(realizarEmprestimoBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 280, 40));

        reservarLivroBotao.setContentAreaFilled(false);
        reservarLivroBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservarLivroBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(reservarLivroBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 230, 280, 40));

        renovarEmprestimoBotao.setContentAreaFilled(false);
        renovarEmprestimoBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renovarEmprestimoBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(renovarEmprestimoBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 280, 40));

        pesquisarTituloBotao.setContentAreaFilled(false);
        pesquisarTituloBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarTituloBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(pesquisarTituloBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 260, 280, 40));

        pesquisarAutorBotao.setContentAreaFilled(false);
        pesquisarAutorBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarAutorBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(pesquisarAutorBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 150, 280, 40));

        cancelarEmprestimoBotao.setContentAreaFilled(false);
        cancelarEmprestimoBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarEmprestimoBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(cancelarEmprestimoBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, 290, 50));

        cancelarReservaBotao.setContentAreaFilled(false);
        cancelarReservaBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarReservaBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(cancelarReservaBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 390, 290, 50));

        pesquisarGeneroBotao.setContentAreaFilled(false);
        pesquisarGeneroBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarGeneroBotaoActionPerformed(evt);
            }
        });
        getContentPane().add(pesquisarGeneroBotao, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 200, 280, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MenuPosLogin.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void avaliarLivroBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avaliarLivroBotaoActionPerformed
        avaliacaoLivroInterface avaliaInterface = new avaliacaoLivroInterface(livros, exemplares, emprestimos, usuarios, avaliacoes);
        JFrame avaliaFrame = new JFrame();
        avaliaFrame.setSize(700, 500);
        avaliaFrame.add(avaliaInterface);
        avaliaFrame.setVisible(true);
    }//GEN-LAST:event_avaliarLivroBotaoActionPerformed

    private void pesquisarTituloBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarTituloBotaoActionPerformed
        livroPesquisaTitulo = JOptionPane.showInputDialog(null, "Insira o título que deseja pesquisar.");
        for (int i = 0; i < livros.size(); i++) {
            if (livros.get(i)!=null){
                if (livroPesquisaTitulo.equalsIgnoreCase(livros.get(i).getTitulo())) {
                    JOptionPane.showMessageDialog(null, "Livro presente no acervo!");
                    JOptionPane.showMessageDialog(null, "Título da obra: "+livros.get(i).getTitulo()+"\n"
                                    + "Autor da obra: "+livros.get(i).getAutor()+"\nGênero: "+livros.get(i).getGenero()+"\nAno de publicação: "+livros.get(i).getAnoPubli()+"\nSinopse: "+livros.get(i).getSinopse()+"\nNúmero de exemplares no acervo: "+livros.get(i).getNumExemplares());
                }
                else{
                    JOptionPane.showMessageDialog(null, "Livro não encontrado no acervo!");
                }
            }
        }
    }//GEN-LAST:event_pesquisarTituloBotaoActionPerformed

    private void renovarEmprestimoBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renovarEmprestimoBotaoActionPerformed
        IDEmprVerifica = JOptionPane.showInputDialog(null, "Insira o ID do empréstimo que deseja renovar.");
        for(int i = 0; i<emprestimos.size(); i++){
            if(IDEmprVerifica.equals(emprestimos.get(i).getIDEmprestimo())){
                emprestimos.get(i).setDataNovaVencimento(dataVencimento.plusDays(7));
                JOptionPane.showMessageDialog(null, "Empréstimo renovado com sucesso!");
            }
            else{
                JOptionPane.showMessageDialog(null, "Não há empréstimos a serem renovados...");
            }
        }
    }//GEN-LAST:event_renovarEmprestimoBotaoActionPerformed

    private void pesquisarAutorBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarAutorBotaoActionPerformed
        livroPesquisaAutor = JOptionPane.showInputDialog(null, "Insira o autor que deseja pesquisar.");
        for (int i = 0; i < livros.size(); i++) {
            if (livros.get(i)!=null){
                if (livroPesquisaAutor.equalsIgnoreCase(livros.get(i).getAutor())) {
                    System.out.println(livros.get(i).getTitulo());
                    JOptionPane.showMessageDialog(null, "Autor presente no acervo!");
                    JOptionPane.showMessageDialog(null, "Título da obra: "+livros.get(i).getTitulo()+"\n"
                                    + "Autor da obra: "+livros.get(i).getAutor()+"\nGênero: "+livros.get(i).getGenero()+"\nAno de publicação: "+livros.get(i).getAnoPubli()+"\nSinopse: "+livros.get(i).getSinopse()+"\nNúmero de exemplares no acervo: "+livros.get(i).getNumExemplares());
                }
                else{
                    JOptionPane.showMessageDialog(null, "Autor não encontrado no acervo!");
                }
            }
        }
    }//GEN-LAST:event_pesquisarAutorBotaoActionPerformed

    private void reservarLivroBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservarLivroBotaoActionPerformed
        IDlivroReserva = JOptionPane.showInputDialog(null, "Insira o ID do livro que deseja realizar a reserva.");
        senhaVerifica = JOptionPane.showInputDialog(null, "Insira sua senha: ");
        for(int i = 0; i<usuarios.size(); i++){
            for(int j = 0; j<livros.size(); j++){
                if(senhaVerifica.equals(usuarios.get(i).getSenha())){
                    if(IDlivroReserva.equals(livros.get(j).getIDLivro())){
                        for(int y=0; y<livros.get(j).getExemplares().size(); y++){
                            if(!((Exemplar) livros.get(j).getExemplares().get(y)).getReservado()){
                                ((Exemplar) livros.get(i).getExemplares().get(y)).setReservado(true);
                                IDUsuarioReserva = usuarios.get(i).getIDUsuario();
                                ((Exemplar) livros.get(i).getExemplares().get(y)).setIDUsuarioReserva(IDUsuarioReserva);
                                IDReserva = JOptionPane.showInputDialog(null, "Insira o ID da reserva.");
                                exemplares.get(y).setIDReserva(IDReserva);
                                JOptionPane.showMessageDialog(null, "Reserva realizada com sucesso!");
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "Todos os exemplares já estão reservados!");
                            }
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Livro não encontrado no acervo!");
                    }
                }
                JOptionPane.showMessageDialog(null, "Senha incorreta!");
            }
        }
    }//GEN-LAST:event_reservarLivroBotaoActionPerformed

    private void realizarEmprestimoBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realizarEmprestimoBotaoActionPerformed
        IDLivroEmpr = JOptionPane.showInputDialog(null, "Insira o ID do livro que deseja realizar o empréstimo.");
        senhaVerifica = JOptionPane.showInputDialog(null, "Insira sua senha: ");
        for(int i = 0; i<usuarios.size(); i++){
            for(int j = 0; j<livros.size(); j++){
                if(senhaVerifica.equals(usuarios.get(i).getSenha())){
                    if(IDLivroEmpr.equals(livros.get(j).getIDLivro())){
                        for(int y=0; y<livros.get(j).getExemplares().size(); y++){
                            if((livros.get(j).getExemplares().get(y)).getReservado() == false && (livros.get(j).getExemplares().get(y)).getEmprestado() == false){
                                IDEmprestimo = JOptionPane.showInputDialog(null, "Insira o ID do empréstimo.");
                                dataVencimento = LocalDate.now().plusDays(7);
                                IDUsuarioEmpr = usuarios.get(i).getIDUsuario();
                                Emprestimo novoEmprestimo = new Emprestimo(dataVencimento, IDEmprestimo, IDUsuarioEmpr);
                                emprestimos.add(novoEmprestimo);
                                JOptionPane.showMessageDialog(null, "Empréstimo realizado com sucesso!");
                                ((Exemplar) livros.get(i).getExemplares().get(y)).setEmprestado(true);
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "Todos os exemplares já estão reservados ou já estão emprestados...!");
                            }
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Livro não encontrado no acervo!");
                    }
                }
                else{
                JOptionPane.showMessageDialog(null, "Senha incorreta!");
                }
            }
        }
    }//GEN-LAST:event_realizarEmprestimoBotaoActionPerformed

    private void cancelarReservaBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarReservaBotaoActionPerformed
        senhaVerifica = JOptionPane.showInputDialog(null, "Insira a sua senha.");
        IDReserva = JOptionPane.showInputDialog(null, "Insira o ID da reserva que deseja cancelar."); 
        for(int i = 0; i<usuarios.size(); i++){
            for(int y = 0; y<livros.size(); y++){
                for(int j = 0; j<livros.get(y).getExemplares().size(); j++){
                    if(senhaVerifica.equals(usuarios.get(i).getSenha()) && IDReserva.equals(livros.get(y).getExemplares().get(j).getIDReserva())){
                        livros.get(y).getExemplares().get(j).setReservado(false);
                        JOptionPane.showMessageDialog(null, "Reserva cancelada com sucesso.");
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Senha incorreta ou não há reservas para serem canceladas.");
                    }
                }
            }
        }
    }//GEN-LAST:event_cancelarReservaBotaoActionPerformed

    private void cancelarEmprestimoBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarEmprestimoBotaoActionPerformed
        senhaVerifica = JOptionPane.showInputDialog(null, "Insira a sua senha.");
        IDEmprestimo = JOptionPane.showInputDialog(null, "Insira o ID do empréstimo que deseja cancelar."); 
        for(int i = 0; i<usuarios.size(); i++){
            for(int j = 0; j<emprestimos.size(); j++){
                if(senhaVerifica.equals(usuarios.get(i).getSenha()) && IDEmprestimo.equals(emprestimos.get(j).getIDEmprestimo())){
                    for(int y = 0; y<livros.size(); y++){
                        livros.get(y).getExemplares().get(j).setReservado(false);
                        JOptionPane.showMessageDialog(null, "Empréstimo cancelado com sucesso.");
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Senha incorreta ou não há empréstimos para serem cancelados.");
                }
            }
        }
    }//GEN-LAST:event_cancelarEmprestimoBotaoActionPerformed

    private void pesquisarGeneroBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarGeneroBotaoActionPerformed
        livroPesquisaGenero = JOptionPane.showInputDialog(null, "Insira o gênero literário que deseja pesquisar.");
        for (int i = 0; i < livros.size(); i++) {
            if (livros.get(i)!=null){
                if (livroPesquisaGenero.equalsIgnoreCase(livros.get(i).getGenero())) {
                    JOptionPane.showMessageDialog(null, "Gênero literário presente no acervo!");
                    JOptionPane.showMessageDialog(null, "Título da obra: "+livros.get(i).getTitulo()+"\n"
                                    + "Autor da obra: "+livros.get(i).getAutor()+"\nGênero: "+livros.get(i).getGenero()+"\nAno de publicação: "+livros.get(i).getAnoPubli()+"\nSinopse: "+livros.get(i).getSinopse()+"\nNúmero de exemplares no acervo: "+livros.get(i).getNumExemplares());
                }
                else{
                    JOptionPane.showMessageDialog(null, "GÊnero literário não encontrado no acervo!");
                }
            }
        }
    }//GEN-LAST:event_pesquisarGeneroBotaoActionPerformed

    /**
     * @param args the command line arguments
     */
   /* public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipalPosLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipalPosLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipalPosLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipalPosLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipalPosLogin().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton avaliarLivroBotao;
    private javax.swing.JButton cancelarEmprestimoBotao;
    private javax.swing.JButton cancelarReservaBotao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton pesquisarAutorBotao;
    private javax.swing.JButton pesquisarGeneroBotao;
    private javax.swing.JButton pesquisarTituloBotao;
    private javax.swing.JButton realizarEmprestimoBotao;
    private javax.swing.JButton renovarEmprestimoBotao;
    private javax.swing.JButton reservarLivroBotao;
    private javax.swing.JLabel tituloInterface;
    // End of variables declaration//GEN-END:variables
}
